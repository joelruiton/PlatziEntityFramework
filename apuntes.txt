ver versiones de dotnet instaladas:
dotnet --list-sdks

crear proyecto vacío:
dotnet new web

Instalación de EF
dotnet add package Microsoft.EntityFrameworkCore --version 6.0.5

Instalación para crear una base de datos en memoria
dotnet add package Microsoft.EntityFrameworkCore.InMemory --version 6.0.5

Instalación para conectarnos con el motor SQL Server
dotnet add package Microsoft.EntityFrameworkCore.SqlServer --version 6.0.5

Instalación para conectarnos con PostgreSQL
dotnet add package Npgsql.EntityFrameworkCore.PostgreSQL --version 6.0.4

Para los que quieran trabajar con Mysql
dotnet add package MySql.Data.EntityFrameworkCore --version 8.0.22

-----------------------------------------------------------------------------------------------------------
CONSTRUCCION DE MODELOS
-----------------------------------------------------------------------------------------------------------
El tipo de dato Guid es un ‘Identificador global único’ el cual nos 
retorna un dato unico, ejemplo : 5a7939fd-59de-44bd-a092-f5d8434584de

Contexto: Es donde van a ir todas las relaciones de los modelos que nosotros tenemos para poder transformarlo en colecciones que van
a representarse dentro de la base de datos.
Microsoft nos ofrece más información sobre esta clase en el siguiente enlace:
https://docs.microsoft.com/es-es/ef/ef6/fundamentals/working-with-dbcontext#defining-a-dbcontext-derived-class

DBSet: Es un set o una asignación de datos del modelo que nosotros hemos creado previamente, básicamente esto va a representar lo
que sería una tabla dentro del contexto de entity framework.
Un DbSet representa la colección de todas las entidades en el contexto, o que se puede consultar desde la base de datos, de un tipo
determinado. Los objetos DbSet se crean a partir de DbContext mediante el método DbContext. set. Microsoft nos ofrece más información
sobre esta clase en el siguiente enlace:
https://docs.microsoft.com/es-es/dotnet/api/system.data.entity.dbset-1?view=entity-framework-6.2.0

-----------------------------------------------------------------------------------------------------------
FLUENT API
-----------------------------------------------------------------------------------------------------------
Forma avanzada de configuración sin utilizar atributos o data-annotations, usando funciones de extensión anidadas en objetos de
tabla, columnas durante el mapeo de los datos. Se debe realizar en el dbContext sobreescribiendo el metodo onModelCreating

-----------------------------------------------------------------------------------------------------------
MIGRACIONES
-----------------------------------------------------------------------------------------------------------
Verificar si está instalado ef para la terminal de comandos
dotnet ef

Para instalarla, buscar en el navegador dotnet ef tool:
dotnet tool install --global dotnet-ef (para instalar)
dotnet tool update --global dotnet-ef (para actualizarla en cualquier momento)

Antes de añadir cualquier migracion es necesario instalar EF Design
dotnet add package Microsoft.EntityFrameworkCore.Design --version 6.0.5

Cada migración debe de tener un nombre descriptivo
dotnet ef migrations add InitialCreate

Cada vez que agreguemos una migración debemos usar el comando: (primero se debe eliminar la bd actual en caso sea la primera vez)
dotnet ef database update

Agregar migracion
dotnet ef migrations add ColumnPesoCategoria

Datos semilla: deben especificarse en el dbcontext/onModelCreating